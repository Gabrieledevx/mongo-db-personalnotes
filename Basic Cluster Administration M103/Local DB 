Theme: MongoDB Cluster

Target: 

Make a data directory and launch a mongod process for a standalone node:
mkdir allbymyselfdb
mongod --dbpath allbymyselfdb


Display all databases (by default, only admin and local):
mongo
show dbs


Display collections from the local database (this displays more collections from a replica set than from a standalone node):
use local
show collections

Query the oplog after connected to a replica set:
use local
db.oplog.rs.find()

Get information about the oplog (remember the oplog is a capped collection).

Store oplog stats as a variable called stats:
var stats = db.oplog.rs.stats()

Verify that this collection is capped (it will grow to a pre-configured size before it starts to overwrite the oldest entries with newer ones):
stats.capped

Get current size of the oplog:
stats.size

Get size limit of the oplog:
stats.maxSize

Get current oplog data (including first and last event times, and configured oplog size):
rs.printReplicationInfo()

PT2

Create new namespace m103.messages:



use m103
db.createCollection('messages')
Query the oplog, filtering out the heartbeats ("periodic noop") and only returning the latest entry:



use local
db.oplog.rs.find( { "o.msg": { $ne: "periodic noop" } } ).sort( { $natural: -1 } ).limit(1).pretty()
Insert 100 different documents:



use m103
for ( i=0; i< 100; i++) { db.messages.insert( { 'msg': 'not yet', _id: i } ) }
db.messages.count()
Query the oplog to find all operations related to m103.messages:



use local
db.oplog.rs.find({"ns": "m103.messages"}).sort({$natural: -1})
Illustrate that one update statement may generate many entries in the oplog:



use m103
db.messages.updateMany( {}, { $set: { author: 'norberto' } } )
use local
db.oplog.rs.find( { "ns": "m103.messages" } ).sort( { $natural: -1 } )
Remember, even though you can write data to the local db, you should not.